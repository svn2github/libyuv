#summary How to build the libyuv library.

= Getting Started =

How to get and build the libyuv code.

== Pre-requisite = 

You'll need to have depot tools installed:

https://sites.google.com/a/chromium.org/dev/developers/how-tos/depottools

Refer to chromium instructions for each platform for other prerequesites:<br>


== Getting the Code =

Create a working directory, enter it, and run:

<b>
<pre>
gclient config http://libyuv.googlecode.com/svn/trunk 
gclient sync
</pre>
</b>

<pre>
solutions = [
  { "name"        : "trunk",
    "url"         : "https://libyuv.googlecode.com/svn/trunk",
    "deps_file"   : "DEPS",
    "managed"     : True,
    "custom_deps" : {
    },
    "safesync_url": "",
  },
];
</pre>

For iOS add ;target_os=['ios']; to your OSX .gclient and run gclient sync --nohooks twice.<br>
For Android add ;target_os=['android']; to your Linux .gclient and run gclient sync --nohooks<br>

The sync will generate native build files for your environment using gyp (Windows: Visual Studio, OSX: XCode, Linux: make). This generation can also be forced manually: gclient runhooks

=== Git =
A git mirror is available here
http://git.chromium.org/gitweb/?p=external/libyuv.git;a=summary

== Building the Library and Unittests = 

Note: To build just the library and not the tests, change libyuv_test.gyp to libyuv.gyp

=== Windows =

<pre>
set GYP_DEFINES=target_arch=ia32 
call python gyp_libyuv -fninja -G msvs_version=2013 --depth=. libyuv_test.gyp 
ninja -j7 -C out\Release 
ninja -j7 -C out\Debug 

set GYP_DEFINES=target_arch=x64
call python gyp_libyuv -fninja -G msvs_version=2013 --depth=. libyuv_test.gyp
ninja -C out\Debug_x64
ninja -C out\Release_x64
</pre>

=== OSX =

# Clang 64 bit shown.  Remove clang=1 for gcc and change x64 to ia32 for 32 bit <br>
<pre>
GYP_DEFINES="clang=1 target_arch=x64" ./gyp_libyuv -fninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug 
ninja -j7 -C out/Release 

GYP_DEFINES="clang=1 target_arch=ia32" ./gyp_libyuv -fninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug 
ninja -j7 -C out/Release 
</pre>

=== Linux =

<pre>
tools/clang/scripts/update.sh
GYP_DEFINES="target_arch=x64" ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug 
ninja -j7 -C out/Release 

GYP_DEFINES="target_arch=ia32" ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug 
ninja -j7 -C out/Release 
</pre>

=== iOS =
http://www.chromium.org/developers/how-tos/build-instructions-ios<br>
Add to .gclient last line: target_os=['ios'];

armv7
<pre>
GYP_DEFINES="OS=ios target_arch=armv7" GYP_CROSSCOMPILE=1 GYP_GENERATOR_FLAGS="output_dir=out_ios" ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out_ios/Debug-iphoneos libyuv_unittest
ninja -j7 -C out_ios/Release-iphoneos libyuv_unittest
</pre>

arm64
<pre>
GYP_DEFINES="OS=ios target_arch=armv7 target_subarch=64" GYP_CROSSCOMPILE=1 GYP_GENERATOR_FLAGS="output_dir=out_ios" ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out_ios/Debug-iphoneos libyuv_unittest
ninja -j7 -C out_ios/Release-iphoneos libyuv_unittest

</pre>
=== Android =
https://code.google.com/p/chromium/wiki/AndroidBuildInstructions<br>
Add to .gclient last line: target_os=['android'];

armv7
<pre>
GYP_DEFINES="OS=android" GYP_CROSSCOMPILE=1 ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug libyuv_unittest
ninja -j7 -C out/Release libyuv_unittest

arm64
<pre>
GYP_DEFINES="OS=android target_arch=arm64" GYP_CROSSCOMPILE=1 ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug libyuv_unittest
ninja -j7 -C out/Release libyuv_unittest

ia32
<pre>
GYP_DEFINES="OS=android target_arch=ia32" GYP_CROSSCOMPILE=1 ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug libyuv_unittest
ninja -j7 -C out/Release libyuv_unittest

mipsel
<pre>
GYP_DEFINES="OS=android target_arch=mipsel" GYP_CROSSCOMPILE=1 ./gyp_libyuv -f ninja --depth=. libyuv_test.gyp 
ninja -j7 -C out/Debug libyuv_unittest
ninja -j7 -C out/Release libyuv_unittest

arm64 disassembly:
./third_party/android_tools/ndk//toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/aarch64-linux-android-objdump -d out/Release/obj/source/libyuv_neon.row_neon64.o


Old method:
source build/android/envsetup.sh
gclient runhooks
ninja -j7 -C out/Debug 
ninja -j7 -C out/Release 
</pre>

=== Windows Shared Library =

Modify libyuv.gyp from 'static_library' to 'shared_library', and add 'LIBYUV_BUILDING_SHARED_LIBRARY' to 'defines'. <br>
gclient runhooks <br>
After this command follow the building the library instructions above.<br>

If you get a compile error for atlthunk.lib on Windows, read http://www.chromium.org/developers/how-tos/build-instructions-windows<br>

=== Build targets =

<pre>
ninja -C out/Debug libyuv
ninja -C out/Debug libyuv_unittest
ninja -C out/Debug compare
ninja -C out/Debug convert
ninja -C out/Debug psnr
ninja -C out/Debug cpuid
</pre>

== Building the Library with make = 

=== Linux =

<pre>
make -j7 V=1 -f linux.mk
make -j7 V=1 -f linux.mk clean
make -j7 V=1 -f linux.mk CXX=clang++
</pre>

== Building the Library with cmake = 

Install cmake:
http://www.cmake.org/
<pre>
Default debug build:
mkdir out
cd out
cmake ..
cmake --build . 

Release build/install
mkdir out
cd out
cmake -DCMAKE_INSTALL_PREFIX="/usr/lib" -DCMAKE_BUILD_TYPE="Release" ..
cmake --build . --config Release
sudo cmake --build . --target install --config Release

</pre>

=== Windows 8 Phone =

Pre-requisite:<br>
Install Visual Studio 2012 and Arm to your environment.<br>
<pre>
call "c:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\x86_arm\vcvarsx86_arm.bat"
</pre>
or Visual Studio 2013<br>
<pre>
call "c:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\x86_arm\vcvarsx86_arm.bat"
nmake /f winarm.mk clean
nmake /f winarm.mk
</pre>

== Building the Library with native builds (deprecated) = 

=== Windows =

<pre>
gclient runhooks 
devenv -build "Debug" libyuv.sln 
devenv -build "Release" libyuv.sln 
</pre>
=== OSX =

<pre>
gclient runhooks 
xcodebuild -project libyuv.xcodeproj -configuration Debug 
xcodebuild -project libyuv.xcodeproj -configuration Release 
</pre>

=== Linux =

<pre>
gclient runhooks 
make -j7 V=1 -r libyuv BUILDTYPE=Debug 
make -j7 V=1 -r libyuv BUILDTYPE=Release 
</pre>

=== iOS =

<pre>
GYP_DEFINES="OS=ios target_arch=armv7 armv7=1 arm_neon=1" GYP_CROSSCOMPILE=1 ./gyp_libyuv  --depth=. libyuv_test.gyp 
xcodebuild -project libyuv.xcodeproj -configuration Debug -arch armv7 -sdk iphoneos7.0 
xcodebuild -project libyuv.xcodeproj -configuration Release -arch armv7 -sdk iphoneos7.0 
</pre>

=== Windows Shared Library =

Modify libyuv.gyp from 'static_library' to 'shared_library', and add 'LIBYUV_BUILDING_SHARED_LIBRARY' to 'defines'. Then run this.<br>
gclient runhooks <br>
After this command follow the building the library instructions above.<br>

If you get a compile error for atlthunk.lib on Windows, read http://www.chromium.org/developers/how-tos/build-instructions-windows

=== 64 bit Windows =

<pre>
set GYP_DEFINES=target_arch=x64 
gclient runhooks V=1 
</pre>

=== ARM Linux =

<pre>
$ export GYP_DEFINES="target_arch=arm" 
$ export CROSSTOOL=`<path>`/arm-none-linux-gnueabi 
$ export CXX=$CROSSTOOL-g++ 
$ export CC=$CROSSTOOL-gcc 
$ export AR=$CROSSTOOL-ar 
$ export AS=$CROSSTOOL-as 
$ export RANLIB=$CROSSTOOL-ranlib 
$ gclient runhooks 
</pre>

== Running Unittests = 

=== Windows =

<pre>
out\Release\libyuv_unittest.exe --gtest_catch_exceptions=0 --gtest_filter=`*` 
</pre>

=== OSX =

<pre>
out/Release/libyuv_unittest --gtest_filter=`*` 
</pre>

=== Linux =

<pre>
out/Release/libyuv_unittest --gtest_filter=`*` 
</pre>

Replace --gtest_filter=`*` with specific unittest to run.  May include wildcards. e.g.<br>

<pre>
out/Release/libyuv_unittest --gtest_filter=libyuvTest.I420ToARGB_Opt
</pre>

== CPU Emulator tools =

=== Intel SDE (Software Development Emulator) =

Pre-requisite:<br>
Install IntelSDE for Windows.<br>
http://software.intel.com/en-us/articles/intel-software-development-emulator

<pre>
c:\intelsde\sde -hsw -- out\release\libyuv_unittest.exe --gtest_filter=*
</pre>

== Memory tools =

=== Running Dr Memory memcheck for Windows =

Pre-requisite:<br>
Install Dr Memory for Windows and add it to your path.<br>
http://www.drmemory.org/docs/page_install_windows.html

<pre>
set GYP_DEFINES=build_for_tool=drmemory target_arch=ia32 
call python gyp_libyuv -fninja -G msvs_version=2012 --depth=. libyuv_test.gyp 
ninja -C out\Debug 
drmemory out\Debug\libyuv_unittest.exe --gtest_catch_exceptions=0 --gtest_filter=* 
</pre>


=== Running Valgrind memcheck =

Memory errors and race conditions can be found by running tests under special memory tools. [http://valgrind.org/ Valgrind] is an instrumentation framework for building dynamic analysis tools. Various tests and profilers are built upon it to find memory handling errors and memory leaks, for instance. 

<pre>
solutions = [
  { "name"        : "trunk",
    "url"         : "http://libyuv.googlecode.com/svn/trunk",
    "deps_file"   : "DEPS",
    "managed"     : True,
    "custom_deps" : {
       "third_party/valgrind": "http://src.chromium.org/svn/trunk/deps/third_party/valgrind/binaries",
    },
    "safesync_url": "",
  },
]

GYP_DEFINES="clang=0 target_arch=x64 build_for_tool=memcheck" python gyp_libyuv -fninja --depth=. libyuv_test.gyp
ninja -C out/Debug
valgrind out/Debug/libyuv_unittest
</pre>

For more information, see 
http://www.chromium.org/developers/how-tos/using-valgrind

=== Running Thread Sanitizer (tsan) =

<pre>
GYP_DEFINES="clang=0 target_arch=x64 build_for_tool=tsan" python gyp_libyuv -fninja --depth=. libyuv_test.gyp
ninja -C out/Debug
valgrind out/Debug/libyuv_unittest
</pre>

For more info, see
http://www.chromium.org/developers/how-tos/using-valgrind/threadsanitizer

=== Running Address Sanitizer (asan) =

<pre>
GYP_DEFINES="clang=0 target_arch=x64 build_for_tool=asan" python gyp_libyuv -fninja --depth=. libyuv_test.gyp
ninja -C out/Debug
valgrind out/Debug/libyuv_unittest
</pre>

For more info, see
http://dev.chromium.org/developers/testing/addresssanitizer

== Benchmarking =

The unittests can be used to benchmark.<br><br>

=== Windows =
<pre>
set LIBYUV_WIDTH=1280
set LIBYUV_HEIGHT=720
set LIBYUV_REPEAT=1000
out\Release\libyuv_unittest.exe --gtest_filter=*I420ToARGB_Opt 
</pre>
 
=== Linux and Mac =
<pre>
LIBYUV_WIDTH=1280 LIBYUV_HEIGHT=720 LIBYUV_REPEAT=1000 out/Release/libyuv_unittest --gtest_filter=*I420ToARGB_Opt 
  
libyuvTest.I420ToARGB_Opt (547 ms) 
</pre>
Indicates 0.547 ms/frame for 1280 x 720.