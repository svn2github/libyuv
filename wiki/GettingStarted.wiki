= Getting Started =

How to get and build the libyuv code.

== Pre-requisite = 

You'll need to have depot tools installed:

https://sites.google.com/a/chromium.org/dev/developers/how-tos/depottools

== Getting the Code =

Create a working directory, enter it, and run:

gclient config http://libyuv.googlecode.com/svn/trunk<br>
gclient sync

The sync will generate native build files for your environment using gyp (Windows: Visual Studio, OSX: XCode, Linux: make). This generation can also be forced manually:

== Building the Library and Unittests = 

To build just the library and not the tests, change libyuv_test.gyp to libyuv.gyp

=== Windows =

set GYP_DEFINES=target_arch=ia32 <br>
call python build\gyp_chromium -fninja -G msvs_version=2012 --depth=. libyuv_test.gyp <br>
ninja -j8 -C out\Release <br>
ninja -j8 -C out\Debug <br>

=== OSX =

# clang 64 bit <br>
GYP_DEFINES="clang=1 target_arch=x64" build/gyp_chromium -fninja --depth=. libyuv_test.gyp <br>
ninja -j8 -C out/Debug <br>
ninja -j8 -C out/Release <br>

=== Linux =

tools/clang/scripts/update.sh <br>
GYP_DEFINES="clang=1 target_arch=x64" ./build/gyp_chromium -f ninja --depth=. libyuv_test.gyp <br>
ninja -j8 -C out/Debug <br>
ninja -j8 -C out/Release <br>

=== iOS =

add to .gclient last line ];target_os=['ios','mac']; and gclient sync twice <br>

GYP_DEFINES="OS=ios target_arch=armv7 arm_neon=1" GYP_CROSSCOMPILE=1  GYP_GENERATOR_FLAGS="ninja output_dir=out_ios" ./build/gyp_chromium -f ninja --depth=. libyuv_test.gyp
ninja -j8 -C out_ios/Debug-iphoneos
ninja -j8 -C out_ios/Release-iphoneos

=== Windows Shared Library =

Modify libyuv.gyp from 'static_library' to 'shared_library', and add 'LIBYUV_BUILDING_SHARED_LIBRARY' to 'defines'. <br>
gclient runhooks <br>
After this command follow the building the library instructions above.<br>

If you get a compile error for atlthunk.lib on Windows, read http://www.chromium.org/developers/how-tos/build-instructions-windows

<br><br>== Building the Library with native builds (deprecated) = 

=== Windows =

gclient runhooks <br>
devenv -build "Debug" libyuv.sln <br>
devenv -build "Release" libyuv.sln <br>

=== OSX =

gclient runhooks <br>
xcodebuild -project libyuv.xcodeproj -configuration Debug <br>
xcodebuild -project libyuv.xcodeproj -configuration Release <br>

=== Linux =

gclient runhooks <br>
make -j6 V=1 -r libyuv BUILDTYPE=Debug <br>
make -j6 V=1 -r libyuv BUILDTYPE=Release <br>

=== iOS =

add to .gclient last line ];target_os=['ios','mac']; and gclient sync twice <br>

GYP_DEFINES="OS=ios target_arch=armv7 armv7=1 arm_neon=1" GYP_CROSSCOMPILE=1 ./build/gyp_chromium  --depth=. libyuv_test.gyp <br>
xcodebuild -project libyuv.xcodeproj -configuration Release -arch armv7 -sdk iphoneos7.0 <br>

=== Windows Shared Library =

Modify libyuv.gyp from 'static_library' to 'shared_library', and add 'LIBYUV_BUILDING_SHARED_LIBRARY' to 'defines'. Then run this.<br>
gclient runhooks <br>
After this command follow the building the library instructions above.<br>

If you get a compile error for atlthunk.lib on Windows, read http://www.chromium.org/developers/how-tos/build-instructions-windows

=== 64 bit Windows =

set GYP_DEFINES=target_arch=x64 <br>
gclient runhooks V=1 <br>

=== ARM Linux =

$ export GYP_DEFINES="target_arch=arm" <br>
$ export CROSSTOOL=`<path>`/arm-none-linux-gnueabi <br>
$ export CXX=$CROSSTOOL-g++ <br>
$ export CC=$CROSSTOOL-gcc <br>
$ export AR=$CROSSTOOL-ar <br>
$ export AS=$CROSSTOOL-as <br>
$ export RANLIB=$CROSSTOOL-ranlib <br>
$ gclient runhooks <br>

== Running Unittests = 

=== Windows =

out\Release\libyuv_unittest.exe --gtest_catch_exceptions=0 --gtest_filter=`*` <br>

=== OSX =

out/Release/libyuv_unittest --gtest_filter=`*` <br>

=== Linux =

out/Release/libyuv_unittest --gtest_filter=`*` <br>

Replace --gtest_filter=`*` with specific unittest to run.  May include wildcards. e.g.<br>

out/Release/libyuv_unittest --gtest_filter=libyuvTest.I420ToARGB_OptVsC <br>

== Memory tools =

Memory errors and race conditions can be found by running tests under special memory tools. [http://valgrind.org/ Valgrind] is an instrumentation framework for building dynamic analysis tools. Various tests and profilers are built upon it to find memory handling errors and memory leaks, for instance. 

=== Running Dr Memory memcheck =

set GYP_DEFINES=build_for_tool=drmemory target_arch=ia32
call python build\gyp_chromium -fninja -G msvs_version=2012 --depth=. libyuv_test.gyp
ninja -C out\Debug
drmemory out\Debug\libyuv_unittest.exe --gtest_catch_exceptions=0 --gtest_filter=*

=== Running Valgrind memcheck =

Note: Valgrind is currently only supported on Linux and Mac OS X <=10.6. Windows profiling is not yet in place. 
  # Get Valgrind binaries by following instructions at http://www.chromium.org/developers/how-tos/using-valgrind/building-valgrind under the heading "Using Pre-built Binaries from Chromium SVN". Notice: In the .gclient file, you need to add *third_party/valgrind* instead of *src/third_party/valgrind* since Libyuv's directory structure is different from Chromium.
  # Run `gclient sync`
  # Generate Makefiles with the proper configuration by setting GYP_DEFINES before gclient runhooks as described at http://www.chromium.org/developers/how-tos/using-valgrind . This step is optional but Valgrind will allegedly work better with it.
  # Clean (this is important) your output dir.
  # Compile in Release mode (not necessary, but recommended)
  # Run the test with (standing in trunk/): `tools/valgrind-libyuv/libyuv_tests.sh -t out/Release/libyuv_unittest`

=== Running Thread Sanitizer (tsan) =

  # Follow steps 1-5 above, but for the GYP_DEFINES, use *build_for_tool=tsan* instead.
  # Run the test with (standing in trunk/): `tools/valgrind-libyuv/libyuv_tests.sh --tool=tsan -t out/Release/libyuv_unittest`
  # For more info, see http://www.chromium.org/developers/how-tos/using-valgrind/threadsanitizer

=== Running Address Sanitizer (asan) =

  # Follow steps 1-5 above, but for the GYP_DEFINES, use *build_for_tool=asan* instead.
  # Run the test with (standing in trunk/): `tools/valgrind-libyuv/libyuv_tests.sh --tool=asan -t out/Release/libyuv_unittest`
  # For more information, see http://dev.chromium.org/developers/testing/addresssanitizer. 

== Benchmarking =

The unittests can be used to benchmark.<br><br>

set LIBYUV_WIDTH=1280<br>
set LIBYUV_HEIGHT=1280<br>
set LIBYUV_REPEAT=1000<br>
out\Release\libyuv_unittest.exe --gtest_filter=*I420ToARGB_Opt<br><br>

libyuvTest.I420ToARGB_Opt (547 ms)<br>
Indicates 0.547 ms/frame for 1280 x 720.<br>